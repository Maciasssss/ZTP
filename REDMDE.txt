# Step-by-Step Testing Instructions for GC Configurations

## Prerequisites
- Visual Studio Code
- .NET SDK installed
- Create a project with the matrix multiplication code

## Setup
1. Create a file named `runtimeconfig.template.json` in the root of your project
2. Add the provided C# code that includes test methods for all configurations
3. Make sure you have the required NuGet packages:
   ```bash
   dotnet add package BenchmarkDotNet
   dotnet add package Microsoft.VisualBasic
   ```

## Testing Process for Each Configuration

### a) Workstation mode vs. Server mode

1. Set up Workstation mode:
   ```json
   {
     "runtimeOptions": {
       "configProperties": {
         "System.GC.Server": false
       }
     }
   }
   ```

2. Build and run:
   ```bash
   dotnet build
   dotnet run
   ```

3. Record performance metrics

4. Change to Server mode:
   ```json
   {
     "runtimeOptions": {
       "configProperties": {
         "System.GC.Server": true
       }
     }
   }
   ```

5. Build and run again, record metrics for comparison

### b) HeapHardLimit, HeapHardLimitPercent

1. Set up HeapHardLimit (absolute value):
   ```json
   {
     "runtimeOptions": {
       "configProperties": {
         "System.GC.HeapHardLimit": 16777216
       }
     }
   }
   ```

2. Run tests and record metrics

3. Change to percentage-based limit:
   ```json
   {
     "runtimeOptions": {
       "configProperties": {
         "System.GC.HeapHardLimitPercent": 65
       }
     }
   }
   ```

4. Run tests and record metrics

### c) Per-object-heap hard limits

1. Configure multiple heaps with limits:
   ```json
   {
     "runtimeOptions": {
       "configProperties": {
         "System.GC.Server": true,
         "System.GC.GCHeapCount": 2,
         "System.GC.GCHeapHardLimit0": 1048576,
         "System.GC.GCHeapHardLimit1": 1048576
       }
     }
   }
   ```

2. Run tests and record metrics

3. Try percentage-based limits:
   ```json
   {
     "runtimeOptions": {
       "configProperties": {
         "System.GC.Server": true,
         "System.GC.GCHeapCount": 2,
         "System.GC.GCHeapHardLimitPercent0": 30,
         "System.GC.GCHeapHardLimitPercent1": 30
       }
     }
   }
   ```

4. Run tests and record metrics

### d) HighMemoryPercent

1. Configure high memory percentage:
   ```json
   {
     "runtimeOptions": {
       "configProperties": {
         "System.GC.HighMemoryPercent": 80
       }
     }
   }
   ```

2. Run tests and record metrics

3. Try different values (e.g., 70, 90) and compare

### e) Large object heap threshold

1. Configure LOH threshold:
   ```json
   {
     "runtimeOptions": {
       "configProperties": {
         "System.GC.LOHThreshold": 128000
       }
     }
   }
   ```

2. Run tests and record metrics

3. Try different values (e.g., 256000, 512000) and compare

### f) Conserve memory

1. Configure memory conservation:
   ```json
   {
     "runtimeOptions": {
       "configProperties": {
         "System.GC.ConserveMemory": 7
       }
     }
   }
   ```

2. Run tests and record metrics

3. Try different values (0, 3, 9) and compare

### g) Manual GC.Collect(generation)

1. Run the option 'g' in the program:
   ```bash
   dotnet run
   # Then select 'g' when prompted
   ```

2. The program will test different generation collections and show metrics

### h) GC.Collect(2) with LOH compaction

1. Configure LOH compaction in runtimeconfig.template.json:
   ```json
   {
     "runtimeOptions": {
       "configProperties": {
         "System.GC.LargeObjectHeapCompactionMode": "CompactOnce"
       }
     }
   }
   ```

2. Run the option 'h' in the program:
   ```bash
   dotnet run
   # Then select 'h' when prompted
   ```

3. The program will test LOH compaction and show metrics

### i) LowLatencyMode and SustainedLowLatencyMode

1. Configure low latency mode:
   ```json
   {
     "runtimeOptions": {
       "configProperties": {
         "System.GC.LowLatencyMode": true
       }
     }
   }
   ```

2. Run tests and record metrics

3. Change to sustained low latency mode:
   ```json
   {
     "runtimeOptions": {
       "configProperties": {
         "System.GC.SustainedLowLatencyMode": true
       }
     }
   }
   ```

4. Run tests and record metrics

### j) Register for GC Notifications

1. Run the option 'j' in the program:
   ```bash
   dotnet run
   # Then select 'j' when prompted
   ```

2. The program will register for GC notifications and show when they occur

## Comparing Results

Create a table with the following columns:
- Configuration
- Matrix Allocation Time (ms)
- Matrix Multiplication Time (ms)
- Total Memory Usage (KB)
- Gen 0 Collections
- Gen 1 Collections
- Gen 2 Collections
- Peak Memory Usage (KB)
- Observations

This will help you analyze how each GC configuration affects your matrix multiplication code.